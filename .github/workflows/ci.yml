name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  MONGODB_VERSION: '5.0'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
          
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort mypy
        
    - name: Run Ruff (linting)
      run: |
        echo "::group::Ruff Linting and Auto-fix"
        ruff check . --fix --output-format=github
        echo "::endgroup::"
        
    - name: Run Ruff (formatting)
      run: |
        echo "::group::Ruff Formatting"
        ruff format .
        echo "::endgroup::"
        
    - name: Run Black (formatting check)
      run: |
        echo "::group::Black Formatting Check"
        black --check --diff .
        echo "::endgroup::"
        
    - name: Run isort (import sorting)
      run: |
        echo "::group::Import Sorting Check"
        isort --check-only --diff .
        echo "::endgroup::"
        
    - name: Run mypy (type checking)
      run: |
        echo "::group::Type Checking"
        mypy app/ --ignore-missing-imports --no-strict-optional
        echo "::endgroup::"
      continue-on-error: true  # Type checking warnings shouldn't fail the build

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        
    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        timeout 30 bash -c 'until mongosh --eval "db.runCommand({ping: 1})" > /dev/null 2>&1; do sleep 1; done'
        echo "MongoDB is ready!"
        
    - name: Verify MongoDB connection
      run: |
        mongosh --eval "db.runCommand({ping: 1})"
        
    - name: Run smoke tests
      run: |
        echo "::group::Smoke Tests"
        python run_tests.py smoke --no-coverage
        echo "::endgroup::"
        
    - name: Run unit tests
      run: |
        echo "::group::Unit Tests"
        python run_tests.py unit
        echo "::endgroup::"
        
    - name: Run integration tests
      run: |
        echo "::group::Integration Tests"
        python run_tests.py integration
        echo "::endgroup::"
        
    - name: Run all tests with coverage
      run: |
        echo "::group::Full Test Suite with Coverage"
        python run_tests.py all
        echo "::endgroup::"
        
    - name: Generate coverage reports
      run: |
        coverage xml
        coverage html
        coverage report
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request' && matrix.python-version == '3.11'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run Safety (dependency security)
      run: |
        echo "::group::Dependency Security Check"
        safety check --json --output safety-report.json || true
        safety check
        echo "::endgroup::"
        
    - name: Run Bandit (code security)
      run: |
        echo "::group::Code Security Scan"
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/
        echo "::endgroup::"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
      if: always()

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        echo "Coverage reports uploaded to Codecov"
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' }}
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "Please check the logs for details"
        exit 1